import type { EntityManager } from "../../../entity-manager";

import type { DatabaseEvents } from "../../../entity-manager/types/database-events";
import type { CustomClass } from "../../../entity-manager/types/metadata-type";
import type { DatabaseEntity } from "../../../types/database-entity";
import type { ArraySaveData } from "../../types/save-conditions";

interface HandleDataParams {
	data: Array<any>;
	entityManager: EntityManager;
	entity: CustomClass;
	autoGenerateEvents: Array<DatabaseEvents>;
}

export const beforeFormatDataArray = <Entity>({
	data,
	entity,
	entityManager,
	autoGenerateEvents,
}: HandleDataParams) => {
	const dataWithAutoGeneratedFields = data.map(d =>
		entityManager.autoGenerateEntityToDatabase<Entity>({
			events: autoGenerateEvents,
			entity,
			data: d,
		}),
	);

	const dataInDatabaseFormat = dataWithAutoGeneratedFields.map(d =>
		entityManager.convertEntityToDatabase({
			data: d,
			entity,
		}),
	);

	return dataInDatabaseFormat as ArraySaveData<DatabaseEntity>;
};
