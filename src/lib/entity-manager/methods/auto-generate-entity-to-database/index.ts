import { EntityManager } from "../..";
import { isUndefined } from "../../../utils/validations/is-undefined";
import { MetadataUtil } from "../../../utils/metadata-util";
import { shouldAutoGenerate } from "./helpers/should-auto-generate";
import { DatabaseEvents } from "../../types/database-events";
import { BaseConnectionOptions } from "../../../connection/types/connection-options";
import { CustomClass } from "../../types/metadata-type";
import { DatabaseEntity } from "../../../types/database-entity";
import { isNotEmptyObject } from "../../../utils/validations/is-not-empty-object";
import { getSubEntityValue } from "./helpers/get-sub-entity-value";

interface Injectables {
	entityManager: EntityManager<any, any>;
	connectionOptions: BaseConnectionOptions;
}

// eslint-disable-next-line import/exports-last
export interface AutoGenerateEntityToDatabaseParams {
	entity: CustomClass;
	data: DatabaseEntity;
	events?: Array<DatabaseEvents>;
}

const recursiveAutoGenerateEntityToDatabase = (
	{ entityManager, connectionOptions }: Injectables,
	{ entity, data, events = [] }: AutoGenerateEntityToDatabaseParams,
) => {
	if (isUndefined(data)) return;

	const entityMetadata = entityManager.getEntityMetadata(entity);

	return entityMetadata.columns.reduce((acc, columnMetadata) => {
		if (MetadataUtil.isCustomMetadataType(columnMetadata.type)) {
			const subEntityMetadata = entityManager.getEntityMetadata(
				columnMetadata.type,
			);

			const value = getSubEntityValue({
				data,
				subEntityMetadata,
				columnMetadata,
			});

			/**
			 * ALERT: Recursive call!!!
			 * ALERT: Recursive call!!!
			 * ALERT: Recursive call!!!
			 */
			const generatedValue = recursiveAutoGenerateEntityToDatabase(
				{
					entityManager,
					connectionOptions,
				},
				{
					entity: subEntityMetadata,
					events,
					data: value,
				},
			);

			/**
			 * Only defines the new field if the autoGeneratedFields
			 * aren't just an empty object
			 */
			if (isNotEmptyObject(generatedValue)) {
				acc[columnMetadata.databaseName] = generatedValue;
			}

			return acc;
		}

		/**
		 * Is AutoGenerated Field
		 */
		if (
			shouldAutoGenerate({
				columnMetadata,
				events,
			})
		) {
			acc[columnMetadata.name] =
				// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
				columnMetadata.autoGenerate!(connectionOptions);

			return acc;
		}

		return acc;
	}, data);
};

export const autoGenerateEntityToDatabase = (
	{ entityManager, connectionOptions }: Injectables,
	{ entity, data, events = [] }: AutoGenerateEntityToDatabaseParams,
): DatabaseEntity =>
	// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	recursiveAutoGenerateEntityToDatabase(
		{ entityManager, connectionOptions },
		{ entity, data, events },
	)!;
